; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	f:\Semester 4\VGP232 Game Tools & Pipelines\zlib\zlib-1.2.7\contrib\minizip\iowin32.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

EXTRN	__imp__CreateFileW@28:PROC
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	__imp__ReadFile@20:PROC
EXTRN	__imp__WriteFile@20:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__SetFilePointer@16:PROC
EXTRN	__imp__CloseHandle@4:PROC
PUBLIC	_win32_error_file_func
; Function compile flags: /Odtp
; File f:\semester 4\vgp232 game tools & pipelines\zlib\zlib-1.2.7\contrib\minizip\iowin32.c
;	COMDAT _win32_error_file_func
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_win32_error_file_func PROC				; COMDAT

; 332  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 333  :     int ret=-1;

  00004	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 334  :     if (stream!=NULL)

  0000b	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  0000f	74 09		 je	 SHORT $LN1@win32_erro

; 335  :     {
; 336  :         ret = ((WIN32FILE_IOWIN*)stream) -> error;

  00011	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00014	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00017	89 4d fc	 mov	 DWORD PTR _ret$[ebp], ecx
$LN1@win32_erro:

; 337  :     }
; 338  :     return ret;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 339  : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
_win32_error_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_close_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_close_file_func
_TEXT	SEGMENT
_hFile$79480 = -8					; size = 4
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_win32_close_file_func PROC				; COMDAT

; 314  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 315  :     int ret=-1;

  00006	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 316  : 
; 317  :     if (stream!=NULL)

  0000d	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  00011	74 2b		 je	 SHORT $LN2@win32_clos

; 318  :     {
; 319  :         HANDLE hFile;
; 320  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  00013	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	89 4d f8	 mov	 DWORD PTR _hFile$79480[ebp], ecx

; 321  :         if (hFile != NULL)

  0001b	83 7d f8 00	 cmp	 DWORD PTR _hFile$79480[ebp], 0
  0001f	74 11		 je	 SHORT $LN1@win32_clos

; 322  :         {
; 323  :             CloseHandle(hFile);

  00021	8b 55 f8	 mov	 edx, DWORD PTR _hFile$79480[ebp]
  00024	52		 push	 edx
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 324  :             ret=0;

  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0
$LN1@win32_clos:

; 325  :         }
; 326  :         free(stream);

  00032	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 _free
  0003b	83 c4 04	 add	 esp, 4
$LN2@win32_clos:

; 327  :     }
; 328  :     return ret;

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 329  : }

  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
_win32_close_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_seek64_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_seek64_file_func
_TEXT	SEGMENT
tv65 = -28						; size = 4
_dwErr$79468 = -24					; size = 4
_li$79463 = -20						; size = 4
_dwSet$79465 = -16					; size = 4
_dwMoveMethod$ = -12					; size = 4
_ret$ = -8						; size = 4
_hFile$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_offset$ = 16						; size = 8
_origin$ = 24						; size = 4
_win32_seek64_file_func PROC				; COMDAT

; 275  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 276  :     DWORD dwMoveMethod=0xFFFFFFFF;

  00006	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _dwMoveMethod$[ebp], -1

; 277  :     HANDLE hFile = NULL;

  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 278  :     long ret=-1;

  00014	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 279  : 
; 280  :     if (stream!=NULL)

  0001b	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  0001f	74 08		 je	 SHORT $LN10@win32_seek

; 281  :         hFile = ((WIN32FILE_IOWIN*)stream)->hf;

  00021	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	89 4d fc	 mov	 DWORD PTR _hFile$[ebp], ecx
$LN10@win32_seek:

; 282  : 
; 283  :     switch (origin)

  00029	8b 55 18	 mov	 edx, DWORD PTR _origin$[ebp]
  0002c	89 55 e4	 mov	 DWORD PTR tv65[ebp], edx
  0002f	83 7d e4 00	 cmp	 DWORD PTR tv65[ebp], 0
  00033	74 20		 je	 SHORT $LN5@win32_seek
  00035	83 7d e4 01	 cmp	 DWORD PTR tv65[ebp], 1
  00039	74 08		 je	 SHORT $LN7@win32_seek
  0003b	83 7d e4 02	 cmp	 DWORD PTR tv65[ebp], 2
  0003f	74 0b		 je	 SHORT $LN6@win32_seek
  00041	eb 1b		 jmp	 SHORT $LN4@win32_seek
$LN7@win32_seek:

; 284  :     {
; 285  :         case ZLIB_FILEFUNC_SEEK_CUR :
; 286  :             dwMoveMethod = FILE_CURRENT;

  00043	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _dwMoveMethod$[ebp], 1

; 287  :             break;

  0004a	eb 17		 jmp	 SHORT $LN8@win32_seek
$LN6@win32_seek:

; 288  :         case ZLIB_FILEFUNC_SEEK_END :
; 289  :             dwMoveMethod = FILE_END;

  0004c	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR _dwMoveMethod$[ebp], 2

; 290  :             break;

  00053	eb 0e		 jmp	 SHORT $LN8@win32_seek
$LN5@win32_seek:

; 291  :         case ZLIB_FILEFUNC_SEEK_SET :
; 292  :             dwMoveMethod = FILE_BEGIN;

  00055	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwMoveMethod$[ebp], 0

; 293  :             break;

  0005c	eb 05		 jmp	 SHORT $LN8@win32_seek
$LN4@win32_seek:

; 294  :         default: return -1;

  0005e	83 c8 ff	 or	 eax, -1
  00061	eb 55		 jmp	 SHORT $LN11@win32_seek
$LN8@win32_seek:

; 295  :     }
; 296  : 
; 297  :     if (hFile)

  00063	83 7d fc 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  00067	74 4c		 je	 SHORT $LN3@win32_seek

; 298  :     {
; 299  :         LARGE_INTEGER* li = (LARGE_INTEGER*)&offset;

  00069	8d 45 10	 lea	 eax, DWORD PTR _offset$[ebp]
  0006c	89 45 ec	 mov	 DWORD PTR _li$79463[ebp], eax

; 300  :         DWORD dwSet = SetFilePointer(hFile, li->u.LowPart, &li->u.HighPart, dwMoveMethod);

  0006f	8b 4d f4	 mov	 ecx, DWORD PTR _dwMoveMethod$[ebp]
  00072	51		 push	 ecx
  00073	8b 55 ec	 mov	 edx, DWORD PTR _li$79463[ebp]
  00076	83 c2 04	 add	 edx, 4
  00079	52		 push	 edx
  0007a	8b 45 ec	 mov	 eax, DWORD PTR _li$79463[ebp]
  0007d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007f	51		 push	 ecx
  00080	8b 55 fc	 mov	 edx, DWORD PTR _hFile$[ebp]
  00083	52		 push	 edx
  00084	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointer@16
  0008a	89 45 f0	 mov	 DWORD PTR _dwSet$79465[ebp], eax

; 301  :         if (dwSet == INVALID_SET_FILE_POINTER)

  0008d	83 7d f0 ff	 cmp	 DWORD PTR _dwSet$79465[ebp], -1
  00091	75 1b		 jne	 SHORT $LN2@win32_seek

; 302  :         {
; 303  :             DWORD dwErr = GetLastError();

  00093	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00099	89 45 e8	 mov	 DWORD PTR _dwErr$79468[ebp], eax

; 304  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0009c	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0009f	8b 4d e8	 mov	 ecx, DWORD PTR _dwErr$79468[ebp]
  000a2	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 305  :             ret = -1;

  000a5	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 306  :         }
; 307  :         else

  000ac	eb 07		 jmp	 SHORT $LN3@win32_seek
$LN2@win32_seek:

; 308  :             ret=0;

  000ae	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0
$LN3@win32_seek:

; 309  :     }
; 310  :     return ret;

  000b5	8b 45 f8	 mov	 eax, DWORD PTR _ret$[ebp]
$LN11@win32_seek:

; 311  : }

  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
_win32_seek64_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_seek_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_seek_file_func
_TEXT	SEGMENT
tv65 = -24						; size = 4
_dwErr$79434 = -20					; size = 4
_dwSet$79430 = -16					; size = 4
_dwMoveMethod$ = -12					; size = 4
_ret$ = -8						; size = 4
_hFile$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_offset$ = 16						; size = 4
_origin$ = 20						; size = 4
_win32_seek_file_func PROC				; COMDAT

; 238  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 239  :     DWORD dwMoveMethod=0xFFFFFFFF;

  00006	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _dwMoveMethod$[ebp], -1

; 240  :     HANDLE hFile = NULL;

  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 241  : 
; 242  :     long ret=-1;

  00014	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 243  :     if (stream!=NULL)

  0001b	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  0001f	74 08		 je	 SHORT $LN10@win32_seek@2

; 244  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  00021	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	89 4d fc	 mov	 DWORD PTR _hFile$[ebp], ecx
$LN10@win32_seek@2:

; 245  :     switch (origin)

  00029	8b 55 14	 mov	 edx, DWORD PTR _origin$[ebp]
  0002c	89 55 e8	 mov	 DWORD PTR tv65[ebp], edx
  0002f	83 7d e8 00	 cmp	 DWORD PTR tv65[ebp], 0
  00033	74 20		 je	 SHORT $LN5@win32_seek@2
  00035	83 7d e8 01	 cmp	 DWORD PTR tv65[ebp], 1
  00039	74 08		 je	 SHORT $LN7@win32_seek@2
  0003b	83 7d e8 02	 cmp	 DWORD PTR tv65[ebp], 2
  0003f	74 0b		 je	 SHORT $LN6@win32_seek@2
  00041	eb 1b		 jmp	 SHORT $LN4@win32_seek@2
$LN7@win32_seek@2:

; 246  :     {
; 247  :     case ZLIB_FILEFUNC_SEEK_CUR :
; 248  :         dwMoveMethod = FILE_CURRENT;

  00043	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _dwMoveMethod$[ebp], 1

; 249  :         break;

  0004a	eb 17		 jmp	 SHORT $LN8@win32_seek@2
$LN6@win32_seek@2:

; 250  :     case ZLIB_FILEFUNC_SEEK_END :
; 251  :         dwMoveMethod = FILE_END;

  0004c	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR _dwMoveMethod$[ebp], 2

; 252  :         break;

  00053	eb 0e		 jmp	 SHORT $LN8@win32_seek@2
$LN5@win32_seek@2:

; 253  :     case ZLIB_FILEFUNC_SEEK_SET :
; 254  :         dwMoveMethod = FILE_BEGIN;

  00055	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwMoveMethod$[ebp], 0

; 255  :         break;

  0005c	eb 05		 jmp	 SHORT $LN8@win32_seek@2
$LN4@win32_seek@2:

; 256  :     default: return -1;

  0005e	83 c8 ff	 or	 eax, -1
  00061	eb 48		 jmp	 SHORT $LN11@win32_seek@2
$LN8@win32_seek@2:

; 257  :     }
; 258  : 
; 259  :     if (hFile != NULL)

  00063	83 7d fc 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  00067	74 3f		 je	 SHORT $LN3@win32_seek@2

; 260  :     {
; 261  :         DWORD dwSet = SetFilePointer(hFile, offset, NULL, dwMoveMethod);

  00069	8b 45 f4	 mov	 eax, DWORD PTR _dwMoveMethod$[ebp]
  0006c	50		 push	 eax
  0006d	6a 00		 push	 0
  0006f	8b 4d 10	 mov	 ecx, DWORD PTR _offset$[ebp]
  00072	51		 push	 ecx
  00073	8b 55 fc	 mov	 edx, DWORD PTR _hFile$[ebp]
  00076	52		 push	 edx
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointer@16
  0007d	89 45 f0	 mov	 DWORD PTR _dwSet$79430[ebp], eax

; 262  :         if (dwSet == INVALID_SET_FILE_POINTER)

  00080	83 7d f0 ff	 cmp	 DWORD PTR _dwSet$79430[ebp], -1
  00084	75 1b		 jne	 SHORT $LN2@win32_seek@2

; 263  :         {
; 264  :             DWORD dwErr = GetLastError();

  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0008c	89 45 ec	 mov	 DWORD PTR _dwErr$79434[ebp], eax

; 265  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0008f	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00092	8b 4d ec	 mov	 ecx, DWORD PTR _dwErr$79434[ebp]
  00095	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 266  :             ret = -1;

  00098	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 267  :         }
; 268  :         else

  0009f	eb 07		 jmp	 SHORT $LN3@win32_seek@2
$LN2@win32_seek@2:

; 269  :             ret=0;

  000a1	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0
$LN3@win32_seek@2:

; 270  :     }
; 271  :     return ret;

  000a8	8b 45 f8	 mov	 eax, DWORD PTR _ret$[ebp]
$LN11@win32_seek@2:

; 272  : }

  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
_win32_seek_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_tell64_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_tell64_file_func
_TEXT	SEGMENT
_dwErr$79398 = -28					; size = 4
_li$79396 = -24						; size = 8
_ret$ = -16						; size = 8
_hFile$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_win32_tell64_file_func PROC				; COMDAT

; 213  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 214  :     ZPOS64_T ret= (ZPOS64_T)-1;

  00006	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1
  0000d	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp+4], -1

; 215  :     HANDLE hFile = NULL;

  00014	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 216  :     if (stream!=NULL)

  0001b	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  0001f	74 08		 je	 SHORT $LN4@win32_tell

; 217  :         hFile = ((WIN32FILE_IOWIN*)stream)->hf;

  00021	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	89 4d fc	 mov	 DWORD PTR _hFile$[ebp], ecx
$LN4@win32_tell:

; 218  : 
; 219  :     if (hFile)

  00029	83 7d fc 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  0002d	74 63		 je	 SHORT $LN3@win32_tell

; 220  :     {
; 221  :         LARGE_INTEGER li;
; 222  :         li.QuadPart = 0;

  0002f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _li$79396[ebp], 0
  00036	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _li$79396[ebp+4], 0

; 223  :         li.u.LowPart = SetFilePointer(hFile, li.u.LowPart, &li.u.HighPart, FILE_CURRENT);

  0003d	6a 01		 push	 1
  0003f	8d 55 ec	 lea	 edx, DWORD PTR _li$79396[ebp+4]
  00042	52		 push	 edx
  00043	8b 45 e8	 mov	 eax, DWORD PTR _li$79396[ebp]
  00046	50		 push	 eax
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _hFile$[ebp]
  0004a	51		 push	 ecx
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointer@16
  00051	89 45 e8	 mov	 DWORD PTR _li$79396[ebp], eax

; 224  :         if ( (li.LowPart == 0xFFFFFFFF) && (GetLastError() != NO_ERROR))

  00054	83 7d e8 ff	 cmp	 DWORD PTR _li$79396[ebp], -1
  00058	75 2c		 jne	 SHORT $LN2@win32_tell
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00060	85 c0		 test	 eax, eax
  00062	74 22		 je	 SHORT $LN2@win32_tell

; 225  :         {
; 226  :             DWORD dwErr = GetLastError();

  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0006a	89 45 e4	 mov	 DWORD PTR _dwErr$79398[ebp], eax

; 227  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0006d	8b 55 0c	 mov	 edx, DWORD PTR _stream$[ebp]
  00070	8b 45 e4	 mov	 eax, DWORD PTR _dwErr$79398[ebp]
  00073	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 228  :             ret = (ZPOS64_T)-1;

  00076	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1
  0007d	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp+4], -1

; 229  :         }
; 230  :         else

  00084	eb 0c		 jmp	 SHORT $LN3@win32_tell
$LN2@win32_tell:

; 231  :             ret=li.QuadPart;

  00086	8b 4d e8	 mov	 ecx, DWORD PTR _li$79396[ebp]
  00089	89 4d f0	 mov	 DWORD PTR _ret$[ebp], ecx
  0008c	8b 55 ec	 mov	 edx, DWORD PTR _li$79396[ebp+4]
  0008f	89 55 f4	 mov	 DWORD PTR _ret$[ebp+4], edx
$LN3@win32_tell:

; 232  :     }
; 233  :     return ret;

  00092	8b 45 f0	 mov	 eax, DWORD PTR _ret$[ebp]
  00095	8b 55 f4	 mov	 edx, DWORD PTR _ret$[ebp+4]

; 234  : }

  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
_win32_tell64_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_tell_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_tell_file_func
_TEXT	SEGMENT
_dwErr$79378 = -16					; size = 4
_dwSet$79374 = -12					; size = 4
_ret$ = -8						; size = 4
_hFile$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_win32_tell_file_func PROC				; COMDAT

; 192  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 193  :     long ret=-1;

  00006	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 194  :     HANDLE hFile = NULL;

  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 195  :     if (stream!=NULL)

  00014	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  00018	74 08		 je	 SHORT $LN4@win32_tell@2

; 196  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	89 4d fc	 mov	 DWORD PTR _hFile$[ebp], ecx
$LN4@win32_tell@2:

; 197  :     if (hFile != NULL)

  00022	83 7d fc 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  00026	74 3a		 je	 SHORT $LN3@win32_tell@2

; 198  :     {
; 199  :         DWORD dwSet = SetFilePointer(hFile, 0, NULL, FILE_CURRENT);

  00028	6a 01		 push	 1
  0002a	6a 00		 push	 0
  0002c	6a 00		 push	 0
  0002e	8b 55 fc	 mov	 edx, DWORD PTR _hFile$[ebp]
  00031	52		 push	 edx
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointer@16
  00038	89 45 f4	 mov	 DWORD PTR _dwSet$79374[ebp], eax

; 200  :         if (dwSet == INVALID_SET_FILE_POINTER)

  0003b	83 7d f4 ff	 cmp	 DWORD PTR _dwSet$79374[ebp], -1
  0003f	75 1b		 jne	 SHORT $LN2@win32_tell@2

; 201  :         {
; 202  :             DWORD dwErr = GetLastError();

  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00047	89 45 f0	 mov	 DWORD PTR _dwErr$79378[ebp], eax

; 203  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0004a	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0004d	8b 4d f0	 mov	 ecx, DWORD PTR _dwErr$79378[ebp]
  00050	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 204  :             ret = -1;

  00053	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 205  :         }
; 206  :         else

  0005a	eb 06		 jmp	 SHORT $LN3@win32_tell@2
$LN2@win32_tell@2:

; 207  :             ret=(long)dwSet;

  0005c	8b 55 f4	 mov	 edx, DWORD PTR _dwSet$79374[ebp]
  0005f	89 55 f8	 mov	 DWORD PTR _ret$[ebp], edx
$LN3@win32_tell@2:

; 208  :     }
; 209  :     return ret;

  00062	8b 45 f8	 mov	 eax, DWORD PTR _ret$[ebp]

; 210  : }

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
_win32_tell_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_write_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_write_file_func
_TEXT	SEGMENT
_dwErr$79356 = -12					; size = 4
_ret$ = -8						; size = 4
_hFile$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_buf$ = 16						; size = 4
_size$ = 20						; size = 4
_win32_write_file_func PROC				; COMDAT

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 172  :     uLong ret=0;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0

; 173  :     HANDLE hFile = NULL;

  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 174  :     if (stream!=NULL)

  00014	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  00018	74 08		 je	 SHORT $LN4@win32_writ

; 175  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	89 4d fc	 mov	 DWORD PTR _hFile$[ebp], ecx
$LN4@win32_writ:

; 176  : 
; 177  :     if (hFile != NULL)

  00022	83 7d fc 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  00026	74 3b		 je	 SHORT $LN3@win32_writ

; 178  :     {
; 179  :         if (!WriteFile(hFile, buf, size, &ret, NULL))

  00028	6a 00		 push	 0
  0002a	8d 55 f8	 lea	 edx, DWORD PTR _ret$[ebp]
  0002d	52		 push	 edx
  0002e	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  00031	50		 push	 eax
  00032	8b 4d 10	 mov	 ecx, DWORD PTR _buf$[ebp]
  00035	51		 push	 ecx
  00036	8b 55 fc	 mov	 edx, DWORD PTR _hFile$[ebp]
  00039	52		 push	 edx
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WriteFile@20
  00040	85 c0		 test	 eax, eax
  00042	75 1f		 jne	 SHORT $LN3@win32_writ

; 180  :         {
; 181  :             DWORD dwErr = GetLastError();

  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0004a	89 45 f4	 mov	 DWORD PTR _dwErr$79356[ebp], eax

; 182  :             if (dwErr == ERROR_HANDLE_EOF)

  0004d	83 7d f4 26	 cmp	 DWORD PTR _dwErr$79356[ebp], 38 ; 00000026H
  00051	75 07		 jne	 SHORT $LN1@win32_writ

; 183  :                 dwErr = 0;

  00053	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwErr$79356[ebp], 0
$LN1@win32_writ:

; 184  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0005a	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR _dwErr$79356[ebp]
  00060	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@win32_writ:

; 185  :         }
; 186  :     }
; 187  : 
; 188  :     return ret;

  00063	8b 45 f8	 mov	 eax, DWORD PTR _ret$[ebp]

; 189  : }

  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
_win32_write_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_read_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_read_file_func
_TEXT	SEGMENT
_dwErr$79333 = -12					; size = 4
_ret$ = -8						; size = 4
_hFile$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_buf$ = 16						; size = 4
_size$ = 20						; size = 4
_win32_read_file_func PROC				; COMDAT

; 149  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 150  :     uLong ret=0;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0

; 151  :     HANDLE hFile = NULL;

  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 152  :     if (stream!=NULL)

  00014	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  00018	74 08		 je	 SHORT $LN4@win32_read

; 153  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	89 4d fc	 mov	 DWORD PTR _hFile$[ebp], ecx
$LN4@win32_read:

; 154  : 
; 155  :     if (hFile != NULL)

  00022	83 7d fc 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  00026	74 3b		 je	 SHORT $LN3@win32_read

; 156  :     {
; 157  :         if (!ReadFile(hFile, buf, size, &ret, NULL))

  00028	6a 00		 push	 0
  0002a	8d 55 f8	 lea	 edx, DWORD PTR _ret$[ebp]
  0002d	52		 push	 edx
  0002e	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  00031	50		 push	 eax
  00032	8b 4d 10	 mov	 ecx, DWORD PTR _buf$[ebp]
  00035	51		 push	 ecx
  00036	8b 55 fc	 mov	 edx, DWORD PTR _hFile$[ebp]
  00039	52		 push	 edx
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  00040	85 c0		 test	 eax, eax
  00042	75 1f		 jne	 SHORT $LN3@win32_read

; 158  :         {
; 159  :             DWORD dwErr = GetLastError();

  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0004a	89 45 f4	 mov	 DWORD PTR _dwErr$79333[ebp], eax

; 160  :             if (dwErr == ERROR_HANDLE_EOF)

  0004d	83 7d f4 26	 cmp	 DWORD PTR _dwErr$79333[ebp], 38 ; 00000026H
  00051	75 07		 jne	 SHORT $LN1@win32_read

; 161  :                 dwErr = 0;

  00053	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwErr$79333[ebp], 0
$LN1@win32_read:

; 162  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0005a	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR _dwErr$79333[ebp]
  00060	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@win32_read:

; 163  :         }
; 164  :     }
; 165  : 
; 166  :     return ret;

  00063	8b 45 f8	 mov	 eax, DWORD PTR _ret$[ebp]

; 167  : }

  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
_win32_read_file_func ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _win32_build_iowin
_TEXT	SEGMENT
_w32fiow$79225 = -12					; size = 8
_ret$ = -4						; size = 4
_hFile$ = 8						; size = 4
_win32_build_iowin PROC					; COMDAT

; 70   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 71   :     voidpf ret=NULL;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0

; 72   : 
; 73   :     if ((hFile != NULL) && (hFile != INVALID_HANDLE_VALUE))

  0000d	83 7d 08 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  00011	74 40		 je	 SHORT $LN3@win32_buil
  00013	83 7d 08 ff	 cmp	 DWORD PTR _hFile$[ebp], -1
  00017	74 3a		 je	 SHORT $LN3@win32_buil

; 74   :     {
; 75   :         WIN32FILE_IOWIN w32fiow;
; 76   :         w32fiow.hf = hFile;

  00019	8b 45 08	 mov	 eax, DWORD PTR _hFile$[ebp]
  0001c	89 45 f4	 mov	 DWORD PTR _w32fiow$79225[ebp], eax

; 77   :         w32fiow.error = 0;

  0001f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _w32fiow$79225[ebp+4], 0

; 78   :         ret = malloc(sizeof(WIN32FILE_IOWIN));

  00026	6a 08		 push	 8
  00028	e8 00 00 00 00	 call	 _malloc
  0002d	83 c4 04	 add	 esp, 4
  00030	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 79   : 
; 80   :         if (ret==NULL)

  00033	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00037	75 0c		 jne	 SHORT $LN2@win32_buil

; 81   :             CloseHandle(hFile);

  00039	8b 4d 08	 mov	 ecx, DWORD PTR _hFile$[ebp]
  0003c	51		 push	 ecx
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 82   :         else

  00043	eb 0e		 jmp	 SHORT $LN3@win32_buil
$LN2@win32_buil:

; 83   :             *((WIN32FILE_IOWIN*)ret) = w32fiow;

  00045	8b 55 fc	 mov	 edx, DWORD PTR _ret$[ebp]
  00048	8b 45 f4	 mov	 eax, DWORD PTR _w32fiow$79225[ebp]
  0004b	89 02		 mov	 DWORD PTR [edx], eax
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _w32fiow$79225[ebp+4]
  00050	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN3@win32_buil:

; 84   :     }
; 85   :     return ret;

  00053	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 86   : }

  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
_win32_build_iowin ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _win32_translate_open_mode
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_lpdwDesiredAccess$ = 12				; size = 4
_lpdwCreationDisposition$ = 16				; size = 4
_lpdwShareMode$ = 20					; size = 4
_lpdwFlagsAndAttributes$ = 24				; size = 4
_win32_translate_open_mode PROC				; COMDAT

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 49   :     *lpdwDesiredAccess = *lpdwShareMode = *lpdwFlagsAndAttributes = *lpdwCreationDisposition = 0;

  00003	8b 45 10	 mov	 eax, DWORD PTR _lpdwCreationDisposition$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0000c	8b 4d 18	 mov	 ecx, DWORD PTR _lpdwFlagsAndAttributes$[ebp]
  0000f	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00015	8b 55 14	 mov	 edx, DWORD PTR _lpdwShareMode$[ebp]
  00018	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0001e	8b 45 0c	 mov	 eax, DWORD PTR _lpdwDesiredAccess$[ebp]
  00021	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 50   : 
; 51   :     if ((mode & ZLIB_FILEFUNC_MODE_READWRITEFILTER)==ZLIB_FILEFUNC_MODE_READ)

  00027	8b 4d 08	 mov	 ecx, DWORD PTR _mode$[ebp]
  0002a	83 e1 03	 and	 ecx, 3
  0002d	83 f9 01	 cmp	 ecx, 1
  00030	75 1d		 jne	 SHORT $LN5@win32_tran

; 52   :     {
; 53   :         *lpdwDesiredAccess = GENERIC_READ;

  00032	8b 55 0c	 mov	 edx, DWORD PTR _lpdwDesiredAccess$[ebp]
  00035	c7 02 00 00 00
	80		 mov	 DWORD PTR [edx], -2147483648 ; 80000000H

; 54   :         *lpdwCreationDisposition = OPEN_EXISTING;

  0003b	8b 45 10	 mov	 eax, DWORD PTR _lpdwCreationDisposition$[ebp]
  0003e	c7 00 03 00 00
	00		 mov	 DWORD PTR [eax], 3

; 55   :         *lpdwShareMode = FILE_SHARE_READ;

  00044	8b 4d 14	 mov	 ecx, DWORD PTR _lpdwShareMode$[ebp]
  00047	c7 01 01 00 00
	00		 mov	 DWORD PTR [ecx], 1
  0004d	eb 36		 jmp	 SHORT $LN6@win32_tran
$LN5@win32_tran:

; 56   :     }
; 57   :     else if (mode & ZLIB_FILEFUNC_MODE_EXISTING)

  0004f	8b 55 08	 mov	 edx, DWORD PTR _mode$[ebp]
  00052	83 e2 04	 and	 edx, 4
  00055	74 14		 je	 SHORT $LN3@win32_tran

; 58   :     {
; 59   :         *lpdwDesiredAccess = GENERIC_WRITE | GENERIC_READ;

  00057	8b 45 0c	 mov	 eax, DWORD PTR _lpdwDesiredAccess$[ebp]
  0005a	c7 00 00 00 00
	c0		 mov	 DWORD PTR [eax], -1073741824 ; c0000000H

; 60   :         *lpdwCreationDisposition = OPEN_EXISTING;

  00060	8b 4d 10	 mov	 ecx, DWORD PTR _lpdwCreationDisposition$[ebp]
  00063	c7 01 03 00 00
	00		 mov	 DWORD PTR [ecx], 3
  00069	eb 1a		 jmp	 SHORT $LN6@win32_tran
$LN3@win32_tran:

; 61   :     }
; 62   :     else if (mode & ZLIB_FILEFUNC_MODE_CREATE)

  0006b	8b 55 08	 mov	 edx, DWORD PTR _mode$[ebp]
  0006e	83 e2 08	 and	 edx, 8
  00071	74 12		 je	 SHORT $LN6@win32_tran

; 63   :     {
; 64   :         *lpdwDesiredAccess = GENERIC_WRITE | GENERIC_READ;

  00073	8b 45 0c	 mov	 eax, DWORD PTR _lpdwDesiredAccess$[ebp]
  00076	c7 00 00 00 00
	c0		 mov	 DWORD PTR [eax], -1073741824 ; c0000000H

; 65   :         *lpdwCreationDisposition = CREATE_ALWAYS;

  0007c	8b 4d 10	 mov	 ecx, DWORD PTR _lpdwCreationDisposition$[ebp]
  0007f	c7 01 02 00 00
	00		 mov	 DWORD PTR [ecx], 2
$LN6@win32_tran:

; 66   :     }
; 67   : }

  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
_win32_translate_open_mode ENDP
PUBLIC	_win32_open_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_open_file_func
_TEXT	SEGMENT
_mode_fopen$ = -24					; size = 4
_dwDesiredAccess$ = -20					; size = 4
_dwCreationDisposition$ = -16				; size = 4
_dwFlagsAndAttributes$ = -12				; size = 4
_hFile$ = -8						; size = 4
_dwShareMode$ = -4					; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_win32_open_file_func PROC				; COMDAT

; 134  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 135  :     const char* mode_fopen = NULL;

  00006	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], 0

; 136  :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 137  :     HANDLE hFile = NULL;

  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 138  : 
; 139  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  00014	8d 45 f4	 lea	 eax, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00017	50		 push	 eax
  00018	8d 4d fc	 lea	 ecx, DWORD PTR _dwShareMode$[ebp]
  0001b	51		 push	 ecx
  0001c	8d 55 f0	 lea	 edx, DWORD PTR _dwCreationDisposition$[ebp]
  0001f	52		 push	 edx
  00020	8d 45 ec	 lea	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 10	 mov	 ecx, DWORD PTR _mode$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 _win32_translate_open_mode
  0002d	83 c4 14	 add	 esp, 20			; 00000014H

; 140  : 
; 141  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  00030	83 7d 0c 00	 cmp	 DWORD PTR _filename$[ebp], 0
  00034	74 27		 je	 SHORT $LN1@win32_open
  00036	83 7d ec 00	 cmp	 DWORD PTR _dwDesiredAccess$[ebp], 0
  0003a	74 21		 je	 SHORT $LN1@win32_open

; 142  :         hFile = CreateFile((LPCTSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  0003c	6a 00		 push	 0
  0003e	8b 55 f4	 mov	 edx, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00041	52		 push	 edx
  00042	8b 45 f0	 mov	 eax, DWORD PTR _dwCreationDisposition$[ebp]
  00045	50		 push	 eax
  00046	6a 00		 push	 0
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _dwShareMode$[ebp]
  0004b	51		 push	 ecx
  0004c	8b 55 ec	 mov	 edx, DWORD PTR _dwDesiredAccess$[ebp]
  0004f	52		 push	 edx
  00050	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  00053	50		 push	 eax
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0005a	89 45 f8	 mov	 DWORD PTR _hFile$[ebp], eax
$LN1@win32_open:

; 143  : 
; 144  :     return win32_build_iowin(hFile);

  0005d	8b 4d f8	 mov	 ecx, DWORD PTR _hFile$[ebp]
  00060	51		 push	 ecx
  00061	e8 00 00 00 00	 call	 _win32_build_iowin
  00066	83 c4 04	 add	 esp, 4

; 145  : }

  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
_win32_open_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_open64_file_funcW
; Function compile flags: /Odtp
;	COMDAT _win32_open64_file_funcW
_TEXT	SEGMENT
_mode_fopen$ = -24					; size = 4
_dwDesiredAccess$ = -20					; size = 4
_dwCreationDisposition$ = -16				; size = 4
_dwFlagsAndAttributes$ = -12				; size = 4
_hFile$ = -8						; size = 4
_dwShareMode$ = -4					; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_win32_open64_file_funcW PROC				; COMDAT

; 119  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 120  :     const char* mode_fopen = NULL;

  00006	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], 0

; 121  :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 122  :     HANDLE hFile = NULL;

  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 123  : 
; 124  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  00014	8d 45 f4	 lea	 eax, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00017	50		 push	 eax
  00018	8d 4d fc	 lea	 ecx, DWORD PTR _dwShareMode$[ebp]
  0001b	51		 push	 ecx
  0001c	8d 55 f0	 lea	 edx, DWORD PTR _dwCreationDisposition$[ebp]
  0001f	52		 push	 edx
  00020	8d 45 ec	 lea	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 10	 mov	 ecx, DWORD PTR _mode$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 _win32_translate_open_mode
  0002d	83 c4 14	 add	 esp, 20			; 00000014H

; 125  : 
; 126  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  00030	83 7d 0c 00	 cmp	 DWORD PTR _filename$[ebp], 0
  00034	74 27		 je	 SHORT $LN1@win32_open@2
  00036	83 7d ec 00	 cmp	 DWORD PTR _dwDesiredAccess$[ebp], 0
  0003a	74 21		 je	 SHORT $LN1@win32_open@2

; 127  :         hFile = CreateFileW((LPCWSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  0003c	6a 00		 push	 0
  0003e	8b 55 f4	 mov	 edx, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00041	52		 push	 edx
  00042	8b 45 f0	 mov	 eax, DWORD PTR _dwCreationDisposition$[ebp]
  00045	50		 push	 eax
  00046	6a 00		 push	 0
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _dwShareMode$[ebp]
  0004b	51		 push	 ecx
  0004c	8b 55 ec	 mov	 edx, DWORD PTR _dwDesiredAccess$[ebp]
  0004f	52		 push	 edx
  00050	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  00053	50		 push	 eax
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileW@28
  0005a	89 45 f8	 mov	 DWORD PTR _hFile$[ebp], eax
$LN1@win32_open@2:

; 128  : 
; 129  :     return win32_build_iowin(hFile);

  0005d	8b 4d f8	 mov	 ecx, DWORD PTR _hFile$[ebp]
  00060	51		 push	 ecx
  00061	e8 00 00 00 00	 call	 _win32_build_iowin
  00066	83 c4 04	 add	 esp, 4

; 130  : }

  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
_win32_open64_file_funcW ENDP
_TEXT	ENDS
PUBLIC	_win32_open64_file_funcA
; Function compile flags: /Odtp
;	COMDAT _win32_open64_file_funcA
_TEXT	SEGMENT
_mode_fopen$ = -24					; size = 4
_dwDesiredAccess$ = -20					; size = 4
_dwCreationDisposition$ = -16				; size = 4
_dwFlagsAndAttributes$ = -12				; size = 4
_hFile$ = -8						; size = 4
_dwShareMode$ = -4					; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_win32_open64_file_funcA PROC				; COMDAT

; 104  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 105  :     const char* mode_fopen = NULL;

  00006	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], 0

; 106  :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 107  :     HANDLE hFile = NULL;

  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 108  : 
; 109  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  00014	8d 45 f4	 lea	 eax, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00017	50		 push	 eax
  00018	8d 4d fc	 lea	 ecx, DWORD PTR _dwShareMode$[ebp]
  0001b	51		 push	 ecx
  0001c	8d 55 f0	 lea	 edx, DWORD PTR _dwCreationDisposition$[ebp]
  0001f	52		 push	 edx
  00020	8d 45 ec	 lea	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 10	 mov	 ecx, DWORD PTR _mode$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 _win32_translate_open_mode
  0002d	83 c4 14	 add	 esp, 20			; 00000014H

; 110  : 
; 111  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  00030	83 7d 0c 00	 cmp	 DWORD PTR _filename$[ebp], 0
  00034	74 27		 je	 SHORT $LN1@win32_open@3
  00036	83 7d ec 00	 cmp	 DWORD PTR _dwDesiredAccess$[ebp], 0
  0003a	74 21		 je	 SHORT $LN1@win32_open@3

; 112  :         hFile = CreateFileA((LPCSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  0003c	6a 00		 push	 0
  0003e	8b 55 f4	 mov	 edx, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00041	52		 push	 edx
  00042	8b 45 f0	 mov	 eax, DWORD PTR _dwCreationDisposition$[ebp]
  00045	50		 push	 eax
  00046	6a 00		 push	 0
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _dwShareMode$[ebp]
  0004b	51		 push	 ecx
  0004c	8b 55 ec	 mov	 edx, DWORD PTR _dwDesiredAccess$[ebp]
  0004f	52		 push	 edx
  00050	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  00053	50		 push	 eax
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0005a	89 45 f8	 mov	 DWORD PTR _hFile$[ebp], eax
$LN1@win32_open@3:

; 113  : 
; 114  :     return win32_build_iowin(hFile);

  0005d	8b 4d f8	 mov	 ecx, DWORD PTR _hFile$[ebp]
  00060	51		 push	 ecx
  00061	e8 00 00 00 00	 call	 _win32_build_iowin
  00066	83 c4 04	 add	 esp, 4

; 115  : }

  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
_win32_open64_file_funcA ENDP
_TEXT	ENDS
PUBLIC	_win32_open64_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_open64_file_func
_TEXT	SEGMENT
_mode_fopen$ = -24					; size = 4
_dwDesiredAccess$ = -20					; size = 4
_dwCreationDisposition$ = -16				; size = 4
_dwFlagsAndAttributes$ = -12				; size = 4
_hFile$ = -8						; size = 4
_dwShareMode$ = -4					; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_win32_open64_file_func PROC				; COMDAT

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 90   :     const char* mode_fopen = NULL;

  00006	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], 0

; 91   :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 92   :     HANDLE hFile = NULL;

  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 93   : 
; 94   :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  00014	8d 45 f4	 lea	 eax, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00017	50		 push	 eax
  00018	8d 4d fc	 lea	 ecx, DWORD PTR _dwShareMode$[ebp]
  0001b	51		 push	 ecx
  0001c	8d 55 f0	 lea	 edx, DWORD PTR _dwCreationDisposition$[ebp]
  0001f	52		 push	 edx
  00020	8d 45 ec	 lea	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 10	 mov	 ecx, DWORD PTR _mode$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 _win32_translate_open_mode
  0002d	83 c4 14	 add	 esp, 20			; 00000014H

; 95   : 
; 96   :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  00030	83 7d 0c 00	 cmp	 DWORD PTR _filename$[ebp], 0
  00034	74 27		 je	 SHORT $LN1@win32_open@4
  00036	83 7d ec 00	 cmp	 DWORD PTR _dwDesiredAccess$[ebp], 0
  0003a	74 21		 je	 SHORT $LN1@win32_open@4

; 97   :         hFile = CreateFile((LPCTSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  0003c	6a 00		 push	 0
  0003e	8b 55 f4	 mov	 edx, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00041	52		 push	 edx
  00042	8b 45 f0	 mov	 eax, DWORD PTR _dwCreationDisposition$[ebp]
  00045	50		 push	 eax
  00046	6a 00		 push	 0
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _dwShareMode$[ebp]
  0004b	51		 push	 ecx
  0004c	8b 55 ec	 mov	 edx, DWORD PTR _dwDesiredAccess$[ebp]
  0004f	52		 push	 edx
  00050	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  00053	50		 push	 eax
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0005a	89 45 f8	 mov	 DWORD PTR _hFile$[ebp], eax
$LN1@win32_open@4:

; 98   : 
; 99   :     return win32_build_iowin(hFile);

  0005d	8b 4d f8	 mov	 ecx, DWORD PTR _hFile$[ebp]
  00060	51		 push	 ecx
  00061	e8 00 00 00 00	 call	 _win32_build_iowin
  00066	83 c4 04	 add	 esp, 4

; 100  : }

  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
_win32_open64_file_func ENDP
PUBLIC	_fill_win32_filefunc64W
; Function compile flags: /Odtp
;	COMDAT _fill_win32_filefunc64W
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_win32_filefunc64W PROC				; COMDAT

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 381  :     pzlib_filefunc_def->zopen64_file = win32_open64_file_funcW;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _win32_open64_file_funcW

; 382  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0000f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET _win32_read_file_func

; 383  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00016	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00019	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET _win32_write_file_func

; 384  :     pzlib_filefunc_def->ztell64_file = win32_tell64_file_func;

  00020	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00023	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _win32_tell64_file_func

; 385  :     pzlib_filefunc_def->zseek64_file = win32_seek64_file_func;

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0002d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], OFFSET _win32_seek64_file_func

; 386  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00034	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00037	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], OFFSET _win32_close_file_func

; 387  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00041	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _win32_error_file_func

; 388  :     pzlib_filefunc_def->opaque = NULL;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0004b	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 389  : }

  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_fill_win32_filefunc64W ENDP
_TEXT	ENDS
PUBLIC	_fill_win32_filefunc64A
; Function compile flags: /Odtp
;	COMDAT _fill_win32_filefunc64A
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_win32_filefunc64A PROC				; COMDAT

; 367  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 368  :     pzlib_filefunc_def->zopen64_file = win32_open64_file_funcA;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _win32_open64_file_funcA

; 369  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0000f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET _win32_read_file_func

; 370  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00016	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00019	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET _win32_write_file_func

; 371  :     pzlib_filefunc_def->ztell64_file = win32_tell64_file_func;

  00020	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00023	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _win32_tell64_file_func

; 372  :     pzlib_filefunc_def->zseek64_file = win32_seek64_file_func;

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0002d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], OFFSET _win32_seek64_file_func

; 373  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00034	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00037	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], OFFSET _win32_close_file_func

; 374  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00041	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _win32_error_file_func

; 375  :     pzlib_filefunc_def->opaque = NULL;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0004b	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 376  : }

  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_fill_win32_filefunc64A ENDP
_TEXT	ENDS
PUBLIC	_fill_win32_filefunc64
; Function compile flags: /Odtp
;	COMDAT _fill_win32_filefunc64
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_win32_filefunc64 PROC				; COMDAT

; 354  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 355  :     pzlib_filefunc_def->zopen64_file = win32_open64_file_func;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _win32_open64_file_func

; 356  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0000f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET _win32_read_file_func

; 357  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00016	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00019	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET _win32_write_file_func

; 358  :     pzlib_filefunc_def->ztell64_file = win32_tell64_file_func;

  00020	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00023	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _win32_tell64_file_func

; 359  :     pzlib_filefunc_def->zseek64_file = win32_seek64_file_func;

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0002d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], OFFSET _win32_seek64_file_func

; 360  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00034	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00037	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], OFFSET _win32_close_file_func

; 361  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00041	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _win32_error_file_func

; 362  :     pzlib_filefunc_def->opaque = NULL;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0004b	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 363  : }

  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_fill_win32_filefunc64 ENDP
_TEXT	ENDS
PUBLIC	_fill_win32_filefunc
; Function compile flags: /Odtp
;	COMDAT _fill_win32_filefunc
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_win32_filefunc PROC				; COMDAT

; 342  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 343  :     pzlib_filefunc_def->zopen_file = win32_open_file_func;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _win32_open_file_func

; 344  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0000f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET _win32_read_file_func

; 345  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00016	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00019	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET _win32_write_file_func

; 346  :     pzlib_filefunc_def->ztell_file = win32_tell_file_func;

  00020	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00023	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _win32_tell_file_func

; 347  :     pzlib_filefunc_def->zseek_file = win32_seek_file_func;

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0002d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], OFFSET _win32_seek_file_func

; 348  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00034	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00037	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], OFFSET _win32_close_file_func

; 349  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00041	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _win32_error_file_func

; 350  :     pzlib_filefunc_def->opaque = NULL;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0004b	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 351  : }

  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_fill_win32_filefunc ENDP
END
